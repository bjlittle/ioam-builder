# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
from buildbot.schedulers.forcesched import *
from buildbot.process.properties import Property, Interpolate

from buildbot.scheduler import Nightly
from buildbot.status import html
from buildbot.status.web import authz, auth

from buildbot.changes import pb
from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers.basic  import SingleBranchScheduler


c = BuildmasterConfig = {}

## PROJECT

c['title'] = "HoloViews"
c['titleURL'] = "http://holoviews.org"
c['buildbotURL'] = "http://localhost:8010/"

c['db'] = {
    'db_url' : "sqlite:///state.sqlite"}

c['status'] = [] # List of status targets.

## SLAVES

# Slaves list (arguments: name, password)
c['slaves'] = [buildslave.BuildSlave("docbuilder", "pass"),
               buildslave.BuildSlave("minibuilder", "pass")]

c['protocols'] = {'pb': {'port': 9989}} # Port to connect to slave.

## SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["website", "start-slave", "stop-slave", "update-PR"],
                            properties = [
                                IntParameter(name="PR_number",
                                             label="PR number (default is master):", default=0)],
                            reason=StringParameter(name="reason",
                                                   label="Reason:",
                                                   default='Update docs', size=11)))
# NIGHTLY

c['schedulers'].append(Nightly(name="nightly-start",
                               builderNames=["start-slave"],
                               branch="master",
                               hour=00, minute=50))

c['schedulers'].append(Nightly(name="nightly-build",
                               builderNames=["website"],
                               branch="master",
                               hour=01, minute=00))


c['schedulers'].append(Nightly(name="nightly-stop",
                               builderNames=["stop-slave"],
                               branch="master",
                               hour=01, minute=30))

# TRIGGERS

c['change_source']=[]
c['change_source'].append(
        pb.PBChangeSource(port=9999, user='script', passwd='pass')
)

website_trigger = ChangeFilter(category='website')
merge_trigger = ChangeFilter(category='merge')
start_trigger = ChangeFilter(category='start')
stop_trigger = ChangeFilter(category='stop')
update_trigger = ChangeFilter(category='update')

c['schedulers'].append(
    SingleBranchScheduler(name='website-waiter', builderNames=["website"],
                          change_filter=website_trigger))
c['schedulers'].append(
    SingleBranchScheduler(name='merge-waiter', builderNames=["merge"],
                          change_filter=merge_trigger))
c['schedulers'].append(
    SingleBranchScheduler(name='start-waiter', builderNames=["start-slave"],
                          change_filter=start_trigger))
c['schedulers'].append(
    SingleBranchScheduler(name='stop-waiter', builderNames=["stop-slave"],
                          change_filter=stop_trigger))
c['schedulers'].append(
    SingleBranchScheduler(name='update-waiter', builderNames=["update-PR"],
                          change_filter=update_trigger))

## BUILDERS

# MERGE FACTORY

merge = util.BuildFactory()
def is_not_master(step):
    if step.getProperty('PR_number')==0:
        return False
    if step.getProperty('PR_number')==None:
        return False
    return True

merge.addStep(steps.Git(repourl='git@github.com:ioam/holoviews-data.git',
                               mode = 'full', method = 'clobber',
                        haltOnFailure=True, doStepIf=is_not_master,
                        description="Pull"))

merge.addStep(steps.ShellCommand(command=['git', 'checkout', 'reference_data'],
                                 haltOnFailure=True, doStepIf=is_not_master,
                                 description='Checkout reference_data'))

merge.addStep(steps.ShellCommand(command=['git', 'rm', '-rf', '*'],
                                 haltOnFailure=True, doStepIf=is_not_master,
                                 description="Delete files"))

merge.addStep(steps.ShellCommand(command=['git', 'checkout',
                                          util.Interpolate('origin/%(prop:PR_number)s'),
                                          '.'],
                                 haltOnFailure=True, doStepIf=is_not_master,
                                 description="Get PR files"))

merge.addStep(steps.ShellCommand(command=["git", "commit", "--amend", "--no-edit"],
                                 haltOnFailure=True, doStepIf=is_not_master,
                                 description="Commit"))

merge.addStep(steps.ShellCommand(command=["git", "push", "--force"],
                                 haltOnFailure=True, doStepIf=is_not_master,
                                 description="Push"))

merge.addStep(steps.ShellCommand(command=["git", "push", "origin",
                                          "--delete", Property('PR_number')],
                                 haltOnFailure=True, doStepIf=is_not_master,
                                 description="Push delete"))

merge.addStep(steps.ShellCommand(command=["python", "/slave/ref_data.py",
                                              'restart-master-merge',
                                              Property('PR_number')],
                                     description="Restart build",
                                     haltOnFailure=True))

# WEBSITE FACTORY

website = util.BuildFactory()
website.addStep(steps.Git(repourl='git://github.com/ioam/holoviews.git',
                          mode = 'full', method = 'clobber',
                          description="Fetch HoloViews"))

website.addStep(steps.ShellCommand(command=["/slave/hub/bin/hub", 'checkout',
      util.Interpolate('https://github.com/ioam/holoviews/pull/%(prop:PR_number)s')],
                                 description="Fetch PR",
                                 env={'GITHUB_USER':'sf-issues',
                                      'GITHUB_PASSWORD':'worqane123'.encode('rot13')},
                                   doStepIf=is_not_master,
                                   haltOnFailure=True))

website.addStep(steps.ShellCommand(command=["git", "submodule",
                                            "update", "--init", "doc/builder"],
                                   description="Update builder"))
website.addStep(steps.ShellCommand(command=["git", "submodule",
                                            "update", "--init", "doc/nbpublisher"],
                                   description="Update nbpublisher"))

website.addStep(steps.ShellCommand(command=["make", "clean"],
                                   description="Clear previous build",
                                   workdir="/slave/website/build/doc"))

website.addStep(steps.ShellCommand(command=["make", "ipynb-rst"],
                                   description="Build notebooks",
                                   workdir="/slave/website/build/doc"))

website.addStep(steps.ShellCommand(command=["make", "refmanual"],
                                   description="Build the reference manual",
                                   workdir="/slave/website/build/doc"))

website.addStep(steps.ShellCommand(command=["make", "html"],
                                      description="Build website",
                                      workdir="/slave/website/build/doc",
                                      timeout=2400))

website.addStep(steps.ShellCommand(command=["make", "fix-links"],
                                   description="Fix website links",
                                   workdir="/slave/website/build/doc"))

website.addStep(steps.ShellCommand(command=["/slave/sync_with_S3.sh",
                                               "/slave/website/build/doc/_build/html",
                                               Property('PR_number')],
                                      description="Upload to S3"))

# UPDATE FACTORY

update_PR = util.BuildFactory()
ref_dir = "/slave/update-PR/build/doc/reference_data"

update_PR.addStep(steps.ShellCommand(command=["python", "/slave/ref_data.py",
                                                 'fetch-PR', Property('PR_number')],
                                      description="Fetch S3 test data",
                                      haltOnFailure=True))

update_PR.addStep(steps.Git(repourl='git://github.com/ioam/holoviews.git',
                               mode = 'full', method = 'clobber',
                               description="Pull"))

update_PR.addStep(steps.ShellCommand(command=["/slave/hub/bin/hub", 'checkout',
      util.Interpolate('https://github.com/ioam/holoviews/pull/%(prop:PR_number)s')],
                                 description="Fetch PR",
                                 env={'GITHUB_USER':'sf-issues',
                                      'GITHUB_PASSWORD':'worqane123'.encode('rot13')},
                                 doStepIf=is_not_master,
                                 haltOnFailure=True))

update_PR.addStep(steps.ShellCommand(command=["git", "clone",
                                                "git@github.com:ioam/holoviews-data.git",
                                                "-b", "master",
                                                "./doc/reference_data"],
                                       description="Fetch reference_data",
                                       haltOnFailure=True))

update_PR.addStep(steps.ShellCommand(command=["/slave/git_PR_init.sh", Property('PR_number')],
                                      description="Use PR branch"))


update_PR.addStep(steps.ShellCommand(command=['unzip', '-o',
                                    '/slave/update-PR/travis_build/test_data_py2.zip',
                                    '-d', '/slave/update-PR/build/doc/reference_data'],
                                     description="Unzip PY2 data"))

update_PR.addStep(steps.ShellCommand(command=['unzip', '-o',
                                    '/slave/update-PR/travis_build/test_data_py3.zip',
                                    '-d', '/slave/update-PR/build/doc/reference_data'],
                                     description="Unzip PY3 data"))

update_PR.addStep(steps.ShellCommand(command=["/bin/sh", "-c", "git add --all *"],
                                      workdir=ref_dir,
                                      description="Adding files",
                                     haltOnFailure=True))

update_PR.addStep(steps.ShellCommand(command=["git", "commit", "--amend", "--no-edit"],
                                      workdir=ref_dir,
                                      description="Committing files",
                                     haltOnFailure=True))

update_PR.addStep(steps.ShellCommand(command=["git", "push", "--force", "origin", "HEAD"],
                                      workdir=ref_dir,
                                      description="Pushing files", haltOnFailure=True))


update_PR.addStep(steps.ShellCommand(command=["python", "-u", "/slave/ref_data.py",
                                                 'restart-wait', 'BUILD_NUMBER_FILE'],
                                      description="Restart latest PR Build",
                                      haltOnFailure=True))

# START AND STOP SLAVE FACTORIES

start_slave = util.BuildFactory()
start_slave.addStep(steps.ShellCommand(command=["/slave/run_buildbot_slave.sh",
                                                "start-wait"],
                                       description="Start remote slave"))

stop_slave = util.BuildFactory()
stop_slave.addStep(steps.ShellCommand(command=["/slave/run_buildbot_slave.sh", "stop"],
                                       description="Stop remote slave"))

# REGISTERING BUILDERS

c['builders']=[
    util.BuilderConfig(name="website",
                       slavenames=["docbuilder"],
                       factory=website),

    util.BuilderConfig(name="start-slave",
                       slavenames=["minibuilder"],
                       factory=start_slave),

    util.BuilderConfig(name="stop-slave",
                       slavenames=["minibuilder"],
                       factory=stop_slave),

    util.BuilderConfig(name="update-PR",
                       slavenames=["minibuilder"],
                       factory=update_PR),

    util.BuilderConfig(name="merge",
                       slavenames=["minibuilder"],
                       factory=merge)
]


authz_cfg=authz.Authz(
    auth=auth.BasicAuth([("holoviews",BUILDBOT_SECRET_TOKEN)]),
    gracefulShutdown = True,
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = False,
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))
